{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# IMPORT PACKAGES\n",
    "from sklearn.neighbors import KDTree\n",
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "import time\n",
    "\n",
    "np.random.seed(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# QUESTION 1: Functions\n",
    "\n",
    "# Cross validation function\n",
    "# INPUT: All datasets (NxD np.arrays (X), Nx1 np.arrays (Y)), k (int), # partitions (int), whether to plot prediction curves (bool)\n",
    "# OUTPUT: Loss for L1, L2 (floats)\n",
    "def cross_validation_k(x_train, y_train, x_valid, y_valid, k, partitions=5, plot=False):\n",
    "    start = time.time()\n",
    "    \n",
    "    # Combine train and validation sets\n",
    "    x_cross = np.vstack([x_valid,x_train])\n",
    "    y_cross = np.vstack([y_valid,y_train])\n",
    "    \n",
    "    # Create partitions of indices\n",
    "    indices = np.arange((x_cross.shape[0]))\n",
    "    np.random.shuffle(indices)\n",
    "    part = np.array_split(indices, partitions)\n",
    "    \n",
    "    avg_predictions_l1 = np.zeros((x_cross.shape[0],1))\n",
    "    avg_predictions_l2 = np.zeros((x_cross.shape[0],1))\n",
    "    \n",
    "    for i in range(len(part)):\n",
    "        # Find indices for holdout, training\n",
    "        holdout = part[i]\n",
    "        train = np.array([])\n",
    "        \n",
    "        for j in range(len(part)):\n",
    "            if j==i:\n",
    "                continue\n",
    "            else:\n",
    "                train = np.append(train,np.array(part[j]))\n",
    "        train = train.astype(int)\n",
    "        \n",
    "        x_nhold = x_cross[train] # Neighbours: X-values with known Y\n",
    "        y_nhold = y_cross[train] # Neighbours: Known Y\n",
    "        x_hold = x_cross[holdout] # Test points: \"Unknown\" Y\n",
    "        y_hold = y_cross[holdout] # Test points: Y for testing\n",
    "            \n",
    "        # Find k-NN generated values for all x_cross in holdout\n",
    "        y_knn_l1 = np.array([[]])\n",
    "        y_knn_l2 = np.array([[]])\n",
    "        \n",
    "        for x_val in x_hold:\n",
    "            y_knn_l1 = np.append(y_knn_l1, knn_regression_l1(x_nhold, y_nhold, x_val, k))\n",
    "            y_knn_l2 = np.append(y_knn_l2, knn_regression_l2(x_nhold, y_nhold, x_val, k))\n",
    "        \n",
    "        y_knn_l1 = np.c_[y_knn_l1]\n",
    "        y_knn_l2 = np.c_[y_knn_l2]\n",
    "        \n",
    "        for val in range(y_knn_l1.shape[0]):\n",
    "            avg_predictions_l1[holdout[val],0] = y_knn_l1[val]\n",
    "            avg_predictions_l2[holdout[val],0] = y_knn_l2[val]\n",
    "        \n",
    "    # After running through the whole fold, find the average losses:\n",
    "    avgloss_l1 = RMSEloss(y_cross,avg_predictions_l1)\n",
    "    avgloss_l2 = RMSEloss(y_cross,avg_predictions_l2)\n",
    "\n",
    "    if plot==True:\n",
    "        fig, ax = plt.subplots(1)\n",
    "        ax.plot(x_cross,y_cross)\n",
    "        ax.set_title('Actual Cross-Validation Curve'.format(k))\n",
    "        ax.set_xlabel('Time')\n",
    "        ax.set_ylabel('CO2 Levels')\n",
    "        plt.show()        \n",
    "        \n",
    "        fig, ax = plt.subplots(1)\n",
    "        ax.plot(x_cross,avg_predictions_l2)\n",
    "        ax.set_title('Cross-Validation Prediction Curve for L2, K = {}'.format(k))\n",
    "        ax.set_xlabel('Time')\n",
    "        ax.set_ylabel('CO2 Levels')\n",
    "        plt.show()\n",
    "        \n",
    "    print(\"CV | K-Value: {} | Average loss for L1: {} | Average loss for L2: {} | Time = {}s\".format(k,avgloss_l1,avgloss_l2,(time.time()-start)))\n",
    "    return avgloss_l1, avgloss_l2\n",
    "      \n",
    "# Test function\n",
    "# INPUT: All datasets (NxD np.arrays (X), Nx1 np.arrays (Y)), k (int), whether to plot prediction curves (bool)\n",
    "# OUTPUT: Loss for L1, L2 (floats)\n",
    "def test_k(x_train, y_train, x_valid, y_valid, x_test, y_test, k, plot=False):\n",
    "    start = time.time()\n",
    "    \n",
    "    x_nns = np.vstack([x_valid,x_train])\n",
    "    y_nns = np.vstack([y_valid,y_train])\n",
    "    \n",
    "    y_knn_l1_test = np.array([[]])\n",
    "    y_knn_l2_test = np.array([[]])\n",
    "    \n",
    "    for ind in x_test:       \n",
    "        y_knn_l1_test = np.append(y_knn_l1_test, knn_regression_l1(x_nns, y_nns, ind, k))\n",
    "        y_knn_l2_test = np.append(y_knn_l2_test, knn_regression_l2(x_nns, y_nns, ind, k))\n",
    "    \n",
    "    y_knn_l1_test = np.c_[y_knn_l1_test]\n",
    "    y_knn_l2_test = np.c_[y_knn_l2_test]\n",
    "    \n",
    "    if plot==True:\n",
    "        fig, ax = plt.subplots(1)\n",
    "        ax.plot(x_test,y_test)\n",
    "        ax.set_title('Actual Test Curve'.format(k))\n",
    "        ax.set_xlabel('Time')\n",
    "        ax.set_ylabel('CO2 Levels')\n",
    "        plt.show() \n",
    "        \n",
    "        fig, ax = plt.subplots(1)\n",
    "        ax.plot(x_test,y_knn_l2_test)\n",
    "        ax.set_title('Test Prediction Curve for L2, K = {}'.format(k))\n",
    "        ax.set_xlabel('Time')\n",
    "        ax.set_ylabel('CO2 Levels')\n",
    "        plt.show()\n",
    "    \n",
    "    testloss_l1 = RMSEloss(y_test,y_knn_l1_test)\n",
    "    testloss_l2 = RMSEloss(y_test,y_knn_l2_test)\n",
    "    \n",
    "    print(\"Test | K-Value: {} | Average loss for L1: {} | Average loss for L2: {} | Time = {}s\".format(k,testloss_l1,testloss_l2,(time.time()-start)))\n",
    "    return testloss_l1, testloss_l2\n",
    "\n",
    "# Euclidean (2-norm) regression\n",
    "# INPUT: X and Y training datasets (NxD np.array (X), Nx1 np.array (Y)), test point x_test[i] (1xD np.array), k (int)\n",
    "# OUTPUT: Prediction for y_test[i] (1x1 np.array)\n",
    "def knn_regression_l1(x_train, y_train, x_test, k):\n",
    "    # 2-NORM: Euclidean Distance\n",
    "    # Get indices of k nearest neighbors\n",
    "    dist = np.sqrt(np.sum(np.square(x_train-x_test), axis=1))\n",
    "    i_nn = np.argpartition(dist, kth=k)[:k]\n",
    "    \n",
    "    # Take the average of points in the partition\n",
    "    test_val = np.average(y_train[i_nn])\n",
    "    \n",
    "    return test_val\n",
    "\n",
    "# Manhattan (1-norm) regression\n",
    "# INPUT: X and Y training datasets (NxD np.array (X), Nx1 np.array (Y)), test point x_test[i] (1xD np.array), k (int)\n",
    "# OUTPUT: Prediction for y_test[i] (1x1 np.array)\n",
    "def knn_regression_l2(x_train, y_train, x_test, k): \n",
    "    # 1-NORM: Manhattan Distance\n",
    "    # Get indices of k nearest neighbors\n",
    "    dist = (np.sum(abs(x_train-x_test), axis=1))\n",
    "    i_nn = np.argpartition(dist, kth=k)[:k]\n",
    "    \n",
    "    # Take the average of points in the partition\n",
    "    test_val = np.average(y_train[i_nn])\n",
    "    return test_val\n",
    "\n",
    "# RMSE Loss Function\n",
    "# INPUT: Predicted Y array, actual Y array (Nx1 np.arrays)\n",
    "# OUTPUT: Loss (float)\n",
    "def RMSEloss(y_real,y_pred):\n",
    "    return np.sqrt(np.mean((y_pred-y_real)**2))\n",
    "\n",
    "\n",
    "# Plot Loss Curve\n",
    "# INPUT: All datasets (NxD np.arrays (X), Nx1 np.arrays (Y)), whether to plot cross validation (True) or test curve (bool)\n",
    "# OUTPUT: None (plots are printed)\n",
    "def plot_loss(x_train, y_train, x_valid, y_valid, x_test, y_test, cv=True):\n",
    "    if cv==True:\n",
    "        x_axes = np.arange(1,30)\n",
    "        y_axes_l1 = np.array([])\n",
    "        y_axes_l2 = np.array([])\n",
    "        for k in range(1,30):\n",
    "            loss1, loss2 = cross_validation_k(x_train, y_train, x_valid, y_valid, k, partitions=5, plot=False)\n",
    "            y_axes_l1 = np.append(y_axes_l1,loss1)\n",
    "            y_axes_l2 = np.append(y_axes_l2,loss2)\n",
    "        fig, axs = plt.subplots(2,sharex=True)\n",
    "        axs[0].plot(x_axes,y_axes_l1)\n",
    "        axs[0].set_title('Cross Validation Loss for Distance Metric L1 (top) and L2 (bottom) over K')\n",
    "        axs[0].set_xlabel('RMSE Loss')\n",
    "        axs[1].plot(x_axes,y_axes_l2)\n",
    "        axs[0].set_xlabel('K Value')\n",
    "        axs[0].set_xlabel('RMSE Loss')\n",
    "        plt.show()\n",
    "    else:\n",
    "        x_axes = np.arange(10,15)\n",
    "        y_axes_l1 = np.array([])\n",
    "        y_axes_l2 = np.array([])\n",
    "        for k in range(10,15):\n",
    "            loss1, loss2 = test_k(x_train, y_train, x_valid, y_valid, x_test, y_test, k, plot=False)\n",
    "            y_axes_l1 = np.append(y_axes_l1,loss1)\n",
    "            y_axes_l2 = np.append(y_axes_l2,loss2)    \n",
    "        fig, axs = plt.subplots(2,sharex=True)\n",
    "        axs[0].plot(x_axes,y_axes_l1)\n",
    "        axs[0].set_title('Test Loss for Distance Metric L1 over K')\n",
    "        axs[0].set_xlabel('K Value')\n",
    "        axs[0].set_ylabel('RMSE Loss')\n",
    "        axs[1].plot(x_axes,y_axes_l2)\n",
    "        axs[1].set_title('Cross Validation Loss for Distance Metric L2 over K')\n",
    "        axs[0].set_xlabel('K Value')\n",
    "        axs[0].set_ylabel('RMSE Loss')\n",
    "        plt.show()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working with 'mauna_loa'...\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test | K-Value: 4 | Average loss for L1: 0.4027682877240139 | Average loss for L2: 0.4027682877240139 | Time = 0.8794019222259521s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.4027682877240139, 0.4027682877240139)"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# QUESTION 1: Main\n",
    "from data_utils import load_dataset\n",
    "\n",
    "# 1. Uncomment the dataset you'd like to work with.\n",
    "\n",
    "print(\"Working with 'mauna_loa'...\")\n",
    "x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mauna_loa')\n",
    "\n",
    "#print(\"Working with 'rosenbrock'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('rosenbrock', n_train=1000, d=2)\n",
    "\n",
    "#print(\"Working with 'pumadyn32nm'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('pumadyn32nm')\n",
    "\n",
    "# 2. Iterating over k to find the k estimate: \n",
    "\n",
    "for k in range(1,30):\n",
    "    cross_validation_k(x_train, y_train, x_valid, y_valid, 28, partitions=5, plot=False)\n",
    "    test_k(x_train, y_train, x_valid, y_valid, x_test, y_test, 4, plot=False)\n",
    "\n",
    "# 3. Uncomment to retrieve loss plot.\n",
    "\n",
    "#plot_loss(x_train, y_train, x_valid, y_valid, x_test, y_test, cv=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QUESTION 2: Functions\n",
    "\n",
    "# KD Tree Regression Function\n",
    "# INPUT: All datasets (NxD np.arrays (X), Nx1 np.arrays (Y)), k value (int)\n",
    "# OUTPUT: Test loss (float)\n",
    "def knn_kdtree_regression(x_train, y_train, x_valid, y_valid, x_test, y_test, k_val):\n",
    "    start = time.time()\n",
    "    \n",
    "    x_cross = np.vstack([x_valid,x_train])\n",
    "    y_cross = np.vstack([y_valid,y_train])\n",
    "    \n",
    "    # Set up trees for train, valid, and test sets:\n",
    "    tree_neighbours = KDTree(x_cross)\n",
    "    pred_test = np.zeros((x_test.shape[0],1))\n",
    "    \n",
    "    # Find loss for nearest neighbours:\n",
    "    nearest_dist_test, nearest_ind_test = tree_neighbours.query(x_test, k=k_val)\n",
    "    \n",
    "    it = 0 \n",
    "    \n",
    "    for inds in nearest_ind_test:\n",
    "        pred_test[it,0] = np.average(y_cross[inds])\n",
    "        it+=1\n",
    "        \n",
    "    test_loss = RMSEloss(y_test,pred_test)\n",
    "    \n",
    "    # Print results\n",
    "    print(\" K-Value: {} | Average loss for test: {} | Time = {}s\".format(k_val,test_loss,(time.time()-start)))\n",
    "    \n",
    "    # Return loss values\n",
    "    return test_loss\n",
    "\n",
    "# RMSE Loss Function\n",
    "# INPUT: Predicted Y array, actual Y array (NxD np.arrays)\n",
    "# OUTPUT: Loss (float)\n",
    "def RMSEloss(y_real,y_pred):\n",
    "    return np.sqrt(np.mean((y_pred-y_real)**2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working with 'rosenbrock'...\n",
      "Iteration 0\n",
      " K-Value: 5 | Average loss for test: 0.26680576927423627 | Time = 0.046892642974853516s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2783462791791558 | Average loss for L2: 1.28664643309996 | Time = 1.2242040634155273s\n",
      "Iteration 1\n",
      " K-Value: 5 | Average loss for test: 0.3790673006255698 | Time = 0.05241823196411133s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2255184754569064 | Average loss for L2: 1.2289851481022316 | Time = 1.1695575714111328s\n",
      "Iteration 2\n",
      " K-Value: 5 | Average loss for test: 0.4195481631141861 | Time = 0.0564579963684082s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2251100704678861 | Average loss for L2: 1.2168674092717868 | Time = 1.2012572288513184s\n",
      "Iteration 3\n",
      " K-Value: 5 | Average loss for test: 0.5208687829091821 | Time = 0.08298802375793457s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.176986605730216 | Average loss for L2: 1.166584217338423 | Time = 1.3171355724334717s\n",
      "Iteration 4\n",
      " K-Value: 5 | Average loss for test: 0.6114880533140192 | Time = 0.1315016746520996s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1580022478568335 | Average loss for L2: 1.144439692975329 | Time = 1.205132246017456s\n",
      "Iteration 5\n",
      " K-Value: 5 | Average loss for test: 0.6894160685241714 | Time = 0.16483592987060547s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1369917944405554 | Average loss for L2: 1.1304941166346343 | Time = 1.3078744411468506s\n",
      "Iteration 6\n",
      " K-Value: 5 | Average loss for test: 0.7468695664130561 | Time = 0.21275663375854492s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1415103966785802 | Average loss for L2: 1.137295724415541 | Time = 1.356987476348877s\n",
      "Iteration 7\n",
      " K-Value: 5 | Average loss for test: 0.8003148666715438 | Time = 0.26542019844055176s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1398263515638933 | Average loss for L2: 1.1351793639014107 | Time = 1.4386835098266602s\n",
      "Iteration 8\n",
      " K-Value: 5 | Average loss for test: 0.8383195931730975 | Time = 0.310833215713501s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.147768161111644 | Average loss for L2: 1.1466759316246045 | Time = 1.4181654453277588s\n",
      "Iteration 9\n",
      " K-Value: 5 | Average loss for test: 0.8824858097024124 | Time = 0.39327478408813477s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1461132563432022 | Average loss for L2: 1.1497492303166672 | Time = 1.5074455738067627s\n",
      "Iteration 10\n",
      " K-Value: 5 | Average loss for test: 0.8909326972909707 | Time = 0.4369213581085205s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1568699504335667 | Average loss for L2: 1.1566349200506367 | Time = 1.488041877746582s\n",
      "Iteration 11\n",
      " K-Value: 5 | Average loss for test: 0.9409157428389912 | Time = 0.4820873737335205s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1649702715055823 | Average loss for L2: 1.1663888398489874 | Time = 1.5689828395843506s\n",
      "Iteration 12\n",
      " K-Value: 5 | Average loss for test: 0.9431646647857141 | Time = 0.5107729434967041s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1759071831663221 | Average loss for L2: 1.1776405116203374 | Time = 4.682387351989746s\n",
      "Iteration 13\n",
      " K-Value: 5 | Average loss for test: 0.9641934356018512 | Time = 0.5952072143554688s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1902834776611717 | Average loss for L2: 1.1905878801714105 | Time = 4.708485841751099s\n",
      "Iteration 14\n",
      " K-Value: 5 | Average loss for test: 0.9984543800751491 | Time = 0.5775482654571533s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.1942274508980069 | Average loss for L2: 1.1890657345272018 | Time = 1.716306209564209s\n",
      "Iteration 15\n",
      " K-Value: 5 | Average loss for test: 1.0233264609536443 | Time = 0.6475284099578857s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2027338863569148 | Average loss for L2: 1.2029071525353177 | Time = 5.677279233932495s\n",
      "Iteration 16\n",
      " K-Value: 5 | Average loss for test: 1.0213714391362614 | Time = 0.7585859298706055s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2044114035339932 | Average loss for L2: 1.2031821381789143 | Time = 5.759375810623169s\n",
      "Iteration 17\n",
      " K-Value: 5 | Average loss for test: 1.0573100114620613 | Time = 0.6997606754302979s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2237974193726633 | Average loss for L2: 1.2158177647557178 | Time = 6.003629446029663s\n",
      "Iteration 18\n",
      " K-Value: 5 | Average loss for test: 1.0785168252217128 | Time = 0.6724095344543457s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.228688722966364 | Average loss for L2: 1.2255038485039578 | Time = 2.0742404460906982s\n",
      "Iteration 19\n",
      " K-Value: 5 | Average loss for test: 1.0829342456224056 | Time = 0.6905312538146973s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2413250079637146 | Average loss for L2: 1.2387223203816287 | Time = 6.672465562820435s\n",
      "Iteration 20\n",
      " K-Value: 5 | Average loss for test: 1.0894476586929678 | Time = 0.7058548927307129s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2449393236822426 | Average loss for L2: 1.241306443336293 | Time = 7.292027950286865s\n",
      "Iteration 21\n",
      " K-Value: 5 | Average loss for test: 1.1196573457120944 | Time = 0.7266647815704346s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2599252863899117 | Average loss for L2: 1.2493873010535939 | Time = 7.310150146484375s\n",
      "Iteration 22\n",
      " K-Value: 5 | Average loss for test: 1.1098577886375371 | Time = 0.7677097320556641s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.267174872178801 | Average loss for L2: 1.2593253086615812 | Time = 7.404700756072998s\n",
      "Iteration 23\n",
      " K-Value: 5 | Average loss for test: 1.126001454701541 | Time = 0.7662010192871094s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2622206654589023 | Average loss for L2: 1.2567170546807143 | Time = 7.723363161087036s\n",
      "Iteration 24\n",
      " K-Value: 5 | Average loss for test: 1.141889458141979 | Time = 0.9123198986053467s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2766999556359857 | Average loss for L2: 1.272046815965401 | Time = 7.994707822799683s\n",
      "Iteration 25\n",
      " K-Value: 5 | Average loss for test: 1.1558267725335885 | Time = 0.7956457138061523s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2844065381394043 | Average loss for L2: 1.2864497581111982 | Time = 8.256181716918945s\n",
      "Iteration 26\n",
      " K-Value: 5 | Average loss for test: 1.1662979246619825 | Time = 0.8202402591705322s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.301802452533598 | Average loss for L2: 1.2944232794228683 | Time = 9.634021997451782s\n",
      "Iteration 27\n",
      " K-Value: 5 | Average loss for test: 1.1667961990387867 | Time = 1.1383745670318604s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.3022427944983692 | Average loss for L2: 1.290497242911689 | Time = 9.615947723388672s\n",
      "Iteration 28\n",
      " K-Value: 5 | Average loss for test: 1.1618708827724689 | Time = 0.8954002857208252s\n",
      "Test | K-Value: 5 | Average loss for L1: 1.2983785437703697 | Average loss for L2: 1.2966234416202564 | Time = 9.039536952972412s\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QUESTION 2: Main\n",
    "\n",
    "print(\"Working with 'rosenbrock'...\")\n",
    "\n",
    "# 1. Set up arrays for gathering runtime data.\n",
    "\n",
    "x_vals = np.arange(2,31)\n",
    "time_vals_tree = np.zeros(x_vals.size)\n",
    "time_vals_brute = np.zeros(x_vals.size)\n",
    "it = 0\n",
    "\n",
    "# 2. Iterate over d value and collect runtime data:\n",
    "\n",
    "for d_val in range(2,31):\n",
    "    print(\"Iteration {}\".format(it))\n",
    "    x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('rosenbrock', n_train=5000, d=d_val)\n",
    "    start_tree = time.time()\n",
    "    knn_kdtree_regression(x_train, y_train, x_valid, y_valid, x_test, y_test, 5)\n",
    "    total_tree = time.time() - start_tree\n",
    "    start_brute = time.time()\n",
    "    test_k(x_train, y_train, x_valid, y_valid, x_test, y_test, 5, plot=False)\n",
    "    total_brute = time.time() - start_brute\n",
    "    time_vals_tree[it] = total_tree\n",
    "    time_vals_brute[it] = total_brute\n",
    "    it+=1\n",
    "    \n",
    "# 3. Plot runtime vs. d for KD approach, brute force approach\n",
    "\n",
    "plt.plot(x_vals, time_vals_tree, label = \"KD-Tree Approach\")\n",
    "plt.plot(x_vals, time_vals_brute, label = \"Brute Force Cross-Validation Approach\")\n",
    "plt.xlabel('Dimension Value (d)')\n",
    "# Set the y axis label of the current axis.\n",
    "plt.ylabel('Runtime (s)')\n",
    "# Set a title of the current axes.\n",
    "plt.title('Time Performance of KD-Tree and Brute Force Approaches to k-NN Regression')\n",
    "# show a legend on the plot\n",
    "plt.legend()\n",
    "# Display a figure.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QUESTION 3: Functions\n",
    "\n",
    "# KD tree classification function\n",
    "# INPUT: All datasets (NxD np.arrays (X), Nx(# of classes) np.arrays (Y)), k (int), distance metric (str, 'L1' (2-norm) or 'L2' (1-norm)), whether to predict for validation data (True) or test data (bool)\n",
    "# OUTPUT: Loss for L1, L2 (floats)\n",
    "def knn_kdtree_classification(x_train, y_train, x_valid, y_valid, x_test, y_test, k_val, distance, valid=True):\n",
    "    start = time.time()\n",
    "    \n",
    "    if distance == 'L1':\n",
    "        metric_val = 'euclidean'\n",
    "    elif distance == 'L2':\n",
    "        metric_val = 'manhattan'\n",
    "    else:\n",
    "        return \"Invalid Distance Metric\"\n",
    "    \n",
    "    # Set up trees for train, valid, and test sets:\n",
    "    if valid:\n",
    "        tree_valid = KDTree(x_train,metric=metric_val)\n",
    "        pred_valid = np.zeros((y_valid.shape[0],y_valid.shape[1]))\n",
    "    else:\n",
    "        x_cross = np.vstack([x_valid,x_train])\n",
    "        y_cross = np.vstack([y_valid,y_train])\n",
    "        tree_test = KDTree(x_cross,metric=metric_val)\n",
    "        pred_test = np.zeros((y_test.shape[0],y_test.shape[1]))\n",
    "    \n",
    "    # Find accuracy for nearest neighbours:\n",
    "    if valid:\n",
    "        nearest_dist_valid, nearest_ind_valid = tree_valid.query(x_valid, k=k_val)\n",
    "        \n",
    "        it = 0\n",
    "        for inds1 in nearest_ind_valid:\n",
    "            neighbours = y_train[inds1]\n",
    "            for i in range(neighbours.shape[1]):\n",
    "                vote, count = np.unique(neighbours[:,i], return_counts=True)\n",
    "                pred_valid[it,i] = vote[np.argmax(count)]\n",
    "            it+=1\n",
    "            \n",
    "        pred_valid = pred_valid.astype(bool)\n",
    "        valid_accuracy = accuracy(y_valid,pred_valid)\n",
    "        \n",
    "    else:\n",
    "        nearest_dist_test, nearest_ind_test = tree_test.query(x_test, k=k_val)\n",
    "        \n",
    "        it = 0\n",
    "        for inds2 in nearest_ind_test:\n",
    "            neighbours = y_cross[inds2]\n",
    "            for i in range(neighbours.shape[1]):\n",
    "                vote, count = np.unique(neighbours[:,i], return_counts=True)\n",
    "                pred_test[it,i] = vote[np.argmax(count)]\n",
    "            it+=1\n",
    "            \n",
    "        pred_test = pred_test.astype(bool)\n",
    "        test_accuracy = accuracy(y_test,pred_test)\n",
    "    \n",
    "    # Print results\n",
    "    if valid:\n",
    "        print(\"Metric: {} | K-Value: {} | Accuracy for valid: {} | Time = {}s\".format(distance, k_val,valid_accuracy,(time.time()-start)))\n",
    "    else:\n",
    "        print(\"Metric: {} | K-Value: {} | Accuracy for test: {} | Time = {}s\".format(distance, k_val,test_accuracy,(time.time()-start)))\n",
    "    \n",
    "    # Return accuracy values\n",
    "    if valid:\n",
    "        return valid_accuracy\n",
    "    else:\n",
    "        return test_accuracy\n",
    "    \n",
    "# Accuracy Function\n",
    "# INPUT: Real Y array, predicted Y array (Nx(# of classes) np.arrays)\n",
    "# OUTPUT: Accuracy of results (float percentage)\n",
    "def accuracy(y_real,y_pred):\n",
    "    count = 0\n",
    "    for ind in range(y_real.shape[0]):\n",
    "        it = 1\n",
    "        for ind1 in range(y_real.shape[1]):\n",
    "            if y_real[ind,ind1] != y_pred[ind,ind1]:\n",
    "                it = 0\n",
    "        count+=it\n",
    "    return (count/(y_real.shape[0]))*100\n",
    "\n",
    "# Reshape MNIST data for plotting\n",
    "# INPUT: All X datasets (NxD np.arrays)\n",
    "# OUTPUT: New X datasets (NxD np.arrays)\n",
    "def reshape(x_train, x_valid, x_test):\n",
    "    x_train = np.reshape(x_train,(10000,28,28),order='C')\n",
    "    x_valid = np.reshape(x_valid,(1000,28,28),order='C')\n",
    "    x_test = np.reshape(x_test,(1000,28,28),order='C')\n",
    "    return x_train, x_valid, x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working with 'mnist_small'...\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-bee10a280fa1>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     16\u001b[0m \u001b[0mit\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mk\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m30\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 18\u001b[1;33m     \u001b[0mvalid_acc1\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mit\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mknn_kdtree_classification\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'L1'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalid\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     19\u001b[0m     \u001b[0mvalid_acc2\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mit\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mknn_kdtree_classification\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'L2'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalid\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     20\u001b[0m     \u001b[0mtest_acc1\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mit\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mknn_kdtree_classification\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'L1'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalid\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mFalse\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-5-8b1f90ce806c>\u001b[0m in \u001b[0;36mknn_kdtree_classification\u001b[1;34m(x_train, y_train, x_valid, y_valid, x_test, y_test, k_val, distance, valid)\u001b[0m\n\u001b[0;32m     22\u001b[0m     \u001b[1;31m# Find accuracy for nearest neighbours:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     23\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mvalid\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 24\u001b[1;33m         \u001b[0mnearest_dist_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnearest_ind_valid\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtree_valid\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mx_valid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mk\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mk_val\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     25\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m         \u001b[0mit\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "# QUESTION 3: Main\n",
    "\n",
    "# 1. Uncomment dataset you'd like to work with.\n",
    "\n",
    "#print(\"Working with 'iris'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('iris')\n",
    "\n",
    "print(\"Working with 'mnist_small'...\")\n",
    "x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mnist_small')\n",
    "#x_train, x_valid, x_test = reshape(x_train, x_valid, x_test)\n",
    "\n",
    "# 2. Set up arrays for accuracy data.\n",
    "\n",
    "x_vals = np.arange(2,30)\n",
    "test_acc1 = np.zeros(x_vals.size)\n",
    "valid_acc1 = np.zeros(x_vals.size)\n",
    "test_acc2 = np.zeros(x_vals.size)\n",
    "valid_acc2 = np.zeros(x_vals.size)\n",
    "\n",
    "# 3. Find k estimate by iterating through k.\n",
    "\n",
    "it = 0\n",
    "for k in range(2,30):\n",
    "    valid_acc1[it] = knn_kdtree_classification(x_train, y_train, x_valid, y_valid, x_test, y_test, k, 'L1', valid=True)\n",
    "    valid_acc2[it] = knn_kdtree_classification(x_train, y_train, x_valid, y_valid, x_test, y_test, k, 'L2', valid=True)\n",
    "    test_acc1[it] = knn_kdtree_classification(x_train, y_train, x_valid, y_valid, x_test, y_test, k, 'L1', valid=False)\n",
    "    test_acc2[it] = knn_kdtree_classification(x_train, y_train, x_valid, y_valid, x_test, y_test, k, 'L2', valid=False)\n",
    "    it+=1\n",
    "\n",
    "# 4. Plot accuracy for L1, L2   \n",
    "\n",
    "plt.plot(x_vals, valid_acc1, label = \"Valid Accuracy\")\n",
    "plt.plot(x_vals, test_acc1, label = \"Test Accuracy\")\n",
    "plt.xlabel('k-Value')\n",
    "# Set the y axis label of the current axis.\n",
    "plt.ylabel('Accuracy')\n",
    "# Set a title of the current axes.\n",
    "plt.title('Accuracy vs. K for L1')\n",
    "# show a legend on the plot\n",
    "plt.legend()\n",
    "# Display a figure.\n",
    "plt.show()\n",
    "\n",
    "plt.plot(x_vals, valid_acc2, label = \"Valid Accuracy\")\n",
    "plt.plot(x_vals, test_acc2, label = \"Test Accuracy\")\n",
    "plt.xlabel('k-Value')\n",
    "# Set the y axis label of the current axis.\n",
    "plt.ylabel('Accuracy')\n",
    "# Set a title of the current axes.\n",
    "plt.title('Accuracy vs. K for L2')\n",
    "# show a legend on the plot\n",
    "plt.legend()\n",
    "# Display a figure.\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# QUESTION 4: Functions\n",
    "\n",
    "# SVD regression / classification function\n",
    "# INPUT: All datasets (NxD np.arrays (X), Nx(# of classes) np.arrays (Y)), regression/classification task (str: \"reg\", \"class\")\n",
    "# OUTPUT: Loss or accuracy (percent) for test predictions (float)\n",
    "def svd_regclass(x_train, x_valid, x_test, y_train, y_valid, y_test, task): \n",
    "    start = time.time()\n",
    "    \n",
    "    # Combine train and validation data\n",
    "    x_cross = np.vstack([x_valid,x_train])\n",
    "    y_cross = np.vstack([y_valid,y_train])\n",
    "    \n",
    "    # Compute SVD\n",
    "    x_svd = np.zeros((x_cross.shape[0],(x_cross.shape[1]+1)))\n",
    "    x_svd[:,0] = np.ones((x_cross.shape[0]))\n",
    "    x_svd[:,1:] = x_cross\n",
    "    u, s, vT = np.linalg.svd(x_svd)\n",
    "    \n",
    "    # Form sigma matrix from singular values\n",
    "    s1 = np.zeros((s.size,s.size))\n",
    "    np.fill_diagonal(s1,s)\n",
    "    \n",
    "    # Calculate weights\n",
    "    u1 = u[:,:s1.shape[0]]\n",
    "    weights = np.transpose(vT).dot(np.linalg.inv(s1)).dot(np.transpose(u1)).dot(y_cross)\n",
    "    \n",
    "    # Calculate test points:\n",
    "    X_test = np.zeros((x_test.shape[0],(x_test.shape[1]+1)))\n",
    "    X_test[:,0] = np.ones((x_test.shape[0]))\n",
    "    X_test[:,1:] = x_test\n",
    "    y_hat = np.dot(X_test,weights)\n",
    "    \n",
    "    # Calculate loss/accuracy\n",
    "    if task==\"reg\":\n",
    "        loss = RMSEloss(y_test,y_hat)\n",
    "    elif task==\"class\":\n",
    "        acc = accuracy2(y_test,y_hat)\n",
    "    else:\n",
    "        return print(\"Invalid Task\")\n",
    "    \n",
    "    # Return\n",
    "    if task==\"reg\":\n",
    "        print(\"Classification | Loss for test: {} | Time = {}s\".format(loss,(time.time()-start)))\n",
    "        return loss\n",
    "    else:\n",
    "        print(\"Classification | Accuracy for test: {} | Time = {}s\".format(acc,(time.time()-start)))\n",
    "        return acc\n",
    "\n",
    "# Accuracy Function\n",
    "# INPUT: Real Y array, predicted Y array (Nx(# of classes) np.arrays)\n",
    "# OUTPUT: Accuracy of results (float percentage)\n",
    "def accuracy2(y_real,y_pred):\n",
    "    count = 0\n",
    "    for line in range(y_real.shape[0]):\n",
    "        if np.argmax(y_real[line])==np.argmax(y_pred[line]):\n",
    "            count+=1\n",
    "    return (count/(y_real.shape[0]))*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Working with 'iris'...\n",
      "Classification | Accuracy for test: 86.66666666666667 | Time = 0.007703542709350586s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "86.66666666666667"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# QUESTION 4: Main\n",
    "\n",
    "# 1. Uncomment the dataset you'd like to work with.\n",
    "\n",
    "#print(\"Working with 'mauna_loa'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mauna_loa')\n",
    "\n",
    "#print(\"Working with 'rosenbrock'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('rosenbrock', n_train=1000, d=2)\n",
    "\n",
    "#print(\"Working with 'pumadyn32nm'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('pumadyn32nm')\n",
    "\n",
    "print(\"Working with 'iris'...\")\n",
    "x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('iris')\n",
    "\n",
    "#print(\"Working with 'mnist_small'...\")\n",
    "#x_train, x_valid, x_test, y_train, y_valid, y_test = load_dataset('mnist_small')\n",
    "\n",
    "# 2. Run SVD function to get accuracy/loss\n",
    "\n",
    "svd_regclass(x_train, x_valid, x_test, y_train, y_valid, y_test, \"class\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
